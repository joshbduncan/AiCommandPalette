//USER PREFERENCES

// keeping around for alerting users of breaking changes
var settingsFolderName = "JBD";
var settingsFolder = setupFolderObject(Folder.userData + "/" + settingsFolderName);
var settingsFileName = "AiCommandPaletteSettings.json";

// new v0.10.0 preferences
var userPrefsFolderName = "JBD";
var userPrefsFolder = setupFolderObject(Folder.userData + "/JBD/AiCommandPalette");
var userPrefsFileName = "Preferences.json";

// setup the base prefs model
var prefs = {};
prefs.startupCommands = null;
prefs.hiddenCommands = [];
prefs.workflows = [];
prefs.customCommands = [];
prefs.bookmarks = [];
prefs.scripts = [];
prefs.pickers = [];
prefs.fuzzy = true; // set to new fuzzy matcher as default
prefs.latches = {};
prefs.logging = false;
prefs.version = _version;
prefs.os = os;
prefs.locale = locale;
prefs.aiVersion = aiVersion;
prefs.timestamp = Date.now();

var userPrefs = {};
userPrefs.folder = function () {
  return userPrefsFolder;
};
userPrefs.file = function () {
  var folder = this.folder();
  var file = setupFileObject(folder, userPrefsFileName);
  return file;
};
userPrefs.load = function (inject) {
  var file = this.file();
  logger.log("loading user preferences:", file.fsName);

  // if the prefs files doesn't exist, check for old 'settings' file
  if (!file.exists) {
    logger.log("no user prefs files found, checking for old 'settings' file");
    oldFile = setupFileObject(settingsFolder, settingsFileName);

    // no need to continue if no old 'settings' file is present
    if (!oldFile.exists) return;

    alert(localize(strings.pref_file_non_compatible));
    var backupFile = new File(oldFile + ".bak");
    logger.log("backing up old `settings` file to: ", backupFile.fsName);
    oldFile.copy(backupFile);

    try {
      updateOldPreferences(oldFile);
    } catch (e) {
      alert(localize(strings.pref_file_loading_error) + "\n\n" + e);
      settingsFolder.execute();
      return;
    }
    alert(localize(strings.pref_update_complete));
  }

  if (file.exists) {
    var loadedData, prop, propsToSkip;
    try {
      loadedData = readJSONData(file);
      if (loadedData == {}) {
        return;
      }

      // alert user if locale or os of current machine doesn't match loaded prefs
      // TODO: break when OS is updated, check for better machine identifier
      // if (locale != loadedData.locale || os != loadedData.os)
      //   alert(localize(strings.user_prefs_inconsistency));

      propsToSkip = ["version", "os", "locale", "aiVersion", "timestamp"];
      for (prop in loadedData) {
        if (propsToSkip.includes(prop)) continue;
        prefs[prop] = loadedData[prop];
      }

      if (inject) {
        this.inject();
      }
    } catch (e) {
      file.rename(file.name + ".bak");
      logger.log("error loading user prefs", e);
      logger.log("renaming prefs file:", file.fsName);
      this.reveal();
      Error.runtimeError(1, localize(strings.pref_file_loading_error, e));
    }
  }
};
userPrefs.inject = function () {
  var typesToInject = [
    "workflows",
    "bookmarks",
    "scripts",
    "pickers",
    "customCommands",
  ];
  for (var i = 0; i < typesToInject.length; i++) {
    for (var j = 0; j < prefs[typesToInject[i]].length; j++) {
      commandsData[prefs[typesToInject[i]][j].id] = prefs[typesToInject[i]][j];
    }
  }
};
userPrefs.save = function () {
  var file = this.file();
  logger.log("writing user prefs");
  writeJSONData(prefs, file);
};
userPrefs.backup = function () {
  var backupFile = new File(this.file() + ".bak");
  logger.log("user prefs backed up tp:", backupFile.fsName);
  this.file().copy(backupFile);
};
userPrefs.reveal = function () {
  var folder = this.folder();
  logger.log("revealing user prefs");
  folder.execute();
};

function updateOldPreferences(oldFile) {
  logger.log("converting old 'settings' file to new user prefs file");

  // read old data
  var data = readJSONData(oldFile);

  // no need to continue if we don't know the old version
  if (!data.settings.hasOwnProperty("version")) return;

  if (semanticVersionComparison(data.settings.version, "0.8.1") == -1) {
    // build lut to convert old localized command strings to new command ids
    var commandsLUT = {};
    for (var command in commandsData) {
      commandsLUT[localize(commandsData[command].name)] = command;
    }

    // update bookmarks
    updatedBookmarks = {};
    for (var bookmark in data.commands.bookmark) {
      updatedBookmarks[data.commands.bookmark[bookmark].name] = {
        type: "bookmark",
        path: data.commands.bookmark[bookmark].path,
        bookmarkType: data.commands.bookmark[bookmark].bookmarkType,
      };
    }
    data.commands.bookmark = updatedBookmarks;

    // update scripts
    updatedScripts = {};
    for (var script in data.commands.script) {
      updatedScripts[data.commands.script[script].name] = {
        type: "script",
        path: data.commands.script[script].path,
      };
    }
    data.commands.script = updatedScripts;

    // update workflows
    updatedWorkflows = {};
    updatedActions = [];
    for (var workflow in data.commands.workflow) {
      var cur, updatedAction;
      for (var i = 0; i < data.commands.workflow[workflow].actions.length; i++) {
        cur = data.commands.workflow[workflow].actions[i];
        // if the action can't be found in the LUT, just leave it as user will be prompted when they attempt to run it
        if (!commandsLUT.hasOwnProperty(cur)) {
          updatedAction = cur;
        } else {
          updatedAction = commandsLUT[cur];
        }
        updatedActions.push(updatedAction);
      }
      updatedWorkflows[data.commands.workflow[workflow].name] = {
        type: "workflow",
        actions: updatedActions,
      };
    }
    data.commands.workflow = updatedWorkflows;

    // update hidden commands
    updatedHiddenCommands = [];
    for (var i = 0; i < data.settings.hidden.length; i++) {
      if (commandsLUT.hasOwnProperty(data.settings.hidden[i])) {
        updatedHiddenCommands.push(commandsLUT[data.settings.hidden[i]]);
      }
    }
    data.settings.hidden = updatedHiddenCommands;

    // update recent commands
    updatedRecentCommands = [];
    for (var i = 0; i < data.recent.commands.length; i++) {
      if (commandsLUT.hasOwnProperty(data.recent.commands[i])) {
        updatedRecentCommands.push(commandsLUT[data.recent.commands[i]]);
      }
    }
    data.recent.commands = updatedRecentCommands;

    // update version number so subsequent updates can be applied
    data.settings.version = "0.8.1";
  }

  if (semanticVersionComparison(data.settings.version, "0.10.0") == -1) {
    var startupCommands = [];

    // update bookmarks
    var bookmarks = [];
    var f, bookmark;
    for (var prop in data.commands.bookmark) {
      f = new File(data.commands.bookmark[prop].path);
      if (!f.exists) continue;
      bookmarkName = decodeURI(f.name);
      bookmark = {
        id: prop,
        name: bookmarkName,
        action: "bookmark",
        type: data.commands.bookmark[prop].bookmarkType,
        path: f.fsName,
        docRequired: false,
        selRequired: false,
        hidden: false,
      };
      bookmarks.push(bookmark);
      startupCommands.push(prop);
    }
    prefs.bookmarks = bookmarks;

    // update scripts
    var scripts = [];
    var f, script;
    for (var prop in data.commands.script) {
      f = new File(data.commands.script[prop].path);
      if (!f.exists) continue;
      scriptName = decodeURI(f.name);
      script = {
        id: prop,
        name: scriptName,
        action: "script",
        type: "script",
        path: f.fsName,
        docRequired: false,
        selRequired: false,
        hidden: false,
      };
      scripts.push(script);
      startupCommands.push(prop);
    }
    prefs.scripts = scripts;

    // update workflows
    var workflows = [];
    var workflow, actions, action;
    for (var prop in data.commands.workflow) {
      // make sure actions are using the new command id format
      actions = [];
      for (var i = 0; i < data.commands.workflow[prop].actions.length; i++) {
        action = data.commands.workflow[prop].actions[i];
        if (
          !commandsData.hasOwnProperty(action) &&
          oldCommandIdsLUT.hasOwnProperty(action)
        )
          action = oldCommandIdsLUT[action];
        actions.push(action);
      }

      var workflow = {
        id: prop,
        name: prop,
        actions: actions,
        type: "workflow",
        docRequired: false,
        selRequired: false,
        hidden: false,
      };
      workflows.push(workflow);
      startupCommands.push(prop);
    }
    prefs.workflows = workflows;

    // add the base startup commands
    startupCommands = startupCommands.concat([
      "builtin_recentCommands",
      "config_settings",
    ]);
    prefs.startupCommands = startupCommands;

    // update hidden commands
    var hiddenCommands = data.settings.hidden;
    prefs.hiddenCommands = hiddenCommands;

    userPrefs.save();
  }
}
