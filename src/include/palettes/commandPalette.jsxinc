// CUSTOM SCRIPTUI FILTERABLE LISTBOX

// set flags for query arrow navigation fix
var fromQuery = false;
var fromQueryShiftKey = false;

/**
 * Custom wrapper for a ScriptUI Listbox.
 * @param {Array}   commands    Commands to load into the list box.
 * @param {Object}  container   ScriptUI container the listbox should be attached to.
 * @param {String}  name        Lookup name for the listbox.
 * @param {Array}   bounds      Bounds array for the listbox.
 * @param {Object}  columns     Listbox column information.
 * @param {Boolean} multiselect Should the listbox allow multiple selections (disable some features).
 * @param {String}  helptip     Listbox helptip/tooltip pop-up.
 * @param {Array}   listeners   ScriptUI listeners to add to the listbox.
 */
function ListBoxWrapper(
  commands,
  container,
  name,
  bounds,
  columns,
  multiselect,
  helptip,
  listeners
) {
  this.container = container;
  this.name = name;
  this.columns = columns;
  this.multiselect = multiselect;
  this.helptip = helptip;
  this.listeners = listeners;
  this.listbox = this.make(commands, bounds);
}

ListBoxWrapper.prototype = {
  /**
   * Initialize a new ScriptUI listbox, load the initial commands, and attach event listeners.
   * @param commands Item to load into the listbox.
   * @param bounds   ScriptUI bounds array.
   * @returns        ScriptUI listbox.
   */
  make: function (commands, bounds) {
    var column;
    var columnTitles = [];
    var columnWidths = [];
    var columnKeys = [];
    for (column in this.columns) {
      columnTitles.push(this.columns[column].hideTitle ? "" : column);
      columnWidths.push(this.columns[column].width);
      columnKeys.push(this.columns[column].key);
    }
    listbox = this.container.add("listbox", bounds, undefined, {
      name: this.name,
      numberOfColumns: columnTitles.length,
      showHeaders: true,
      columnTitles: columnTitles,
      columnWidths: columnWidths,
      multiselect: this.multiselect,
    });
    if (commands.length) {
      this.loadCommands(listbox, commands, columnKeys);
      listbox.selection = 0;
    }
    this.addListeners(listbox);
    if (this.helptip) listbox.helpTip = this.helptip;
    listbox.frameStart = 0;
    return listbox;
  },
  /**
   * Update the listbox with new items.
   * @param {Array} matches Update listbox with new commands.
   */
  update: function (matches) {
    temp = this.make(matches, this.listbox.bounds);
    this.listbox.window.remove(this.listbox);
    this.listbox = temp;
  },
  /**
   * Load command items in a ScriptUI listbox.
   * @param {Array}  listbox    ScriptUI listbox to load the command item in to.
   * @param {Array}  commands   Commands to load into the list box.
   * @param {Array}  columnKeys Command lookup key for each column.
   */
  loadCommands: function (listbox, commands, columnKeys) {
    var id, command, name, str, item;
    for (var i = 0; i < commands.length; i++) {
      id = commands[i];
      // if command is no longer available just show the id
      if (!commandsData.hasOwnProperty(id)) {
        item = listbox.add("item", id);
      } else {
        command = commandsData[id];
        name = determineCorrectString(command, "name");

        // add base item with info from first column
        str = determineCorrectString(command, columnKeys[0]);
        item = listbox.add("item", str ? str : name);

        // add remaining columns as subItems
        for (var j = 1; j < columnKeys.length; j++) {
          str = determineCorrectString(command, columnKeys[j]);
          item.subItems[j - 1].text = str ? str : "<missing>";
        }
      }
      item.id = id;
    }
  },
  /**
   * Attach event listeners to the specified listbox.
   * @param {Object} listbox ScriptUI listbox to attach the listeners to.
   */
  addListeners: function (listbox) {
    var listener;
    for (var i = 0; i < this.listeners.length; i++) {
      listener = this.listeners[i];
      listener(listbox);
    }
  },
};

// LISTBOXWRAPPER LISTENERS

/**
 * Close listbox when double-clicking a command.
 * @param {Object} listbox ScriptUI listbox.
 */
function selectOnDoubleClick(listbox) {
  listbox.onDoubleClick = function () {
    this.window.close(1);
  };
}

/**
 * Add listbox command to Workflow when double-clicking.
 * @param {Object}  listbox  ScriptUI listbox.
 */
function addToStepsOnDoubleClick(listbox) {
  listbox.onDoubleClick = function () {
    var win, steps, command, newItem, newPicker;
    win = this.window;
    steps = win.findElement("steps");
    command = commandsData[this.selection.id];

    // check for "Build Picker..." command
    if (command.id == "builtin_buildPicker") {
      newPicker = buildPicker();
      newItem = steps.add("item", newPicker.name);
      newItem.subItems[0].text = newPicker.type;
      newItem.id = newPicker.id;
    } else {
      newItem = steps.add("item", determineCorrectString(command, "name"));
      newItem.subItems[0].text = determineCorrectString(command, "type");
      newItem.id = command.id;
    }
    steps.notify("onChange");
  };
}

/**
 * Swap listbox items in place (along with their corresponding id).
 * @param {Object} x Listbox item.
 * @param {Object} y Listbox item.
 */
function swapListboxItems(x, y) {
  var t = x.text;
  var subT = x.subItems[0].text;
  var id = x.id;
  x.text = y.text;
  x.subItems[0].text = y.subItems[0].text;
  x.id = y.id;
  y.text = t;
  y.subItems[0].text = subT;
  y.id = id;
}

/**
 * Allow end-to-end scrolling from within a listbox.
 * @param {Object}  listbox  ScriptUI listbox.
 */
function scrollListBoxWithArrows(listbox) {
  listbox.addEventListener("keydown", function (e) {
    if (fromQuery) {
      if (fromQueryShiftKey) {
        if (e.keyName == "Up") {
          if (this.selection.index == 0) {
            this.selection = this.items.length - 1;
            e.preventDefault();
          } else {
            this.selection--;
          }
        }
        if (e.keyName == "Down") {
          if (this.selection.index == this.items.length - 1) {
            this.selection = 0;
            e.preventDefault();
          } else {
            if (e.keyName == "Down") this.selection++;
          }
        }
      } else {
        if (e.keyName == "Up" || e.keyName == "Down") {
          if (e.keyName == "Up") {
            e.preventDefault();
            if (!this.selection) {
              this.selection = 0;
            } else if (this.selection.index == 0) {
              // jump to the bottom if at top
              this.selection = this.items.length - 1;
              this.frameStart = this.items.length - 1 - visibleListItems;
            } else {
              if (this.selection.index > 0) {
                this.selection = this.selection.index - 1;
                if (this.selection.index < this.frameStart) this.frameStart--;
              }
            }
          } else if (e.keyName == "Down") {
            e.preventDefault();
            if (!this.selection) {
              this.selection = 0;
            } else if (this.selection.index === this.items.length - 1) {
              // jump to the top if at the bottom
              this.selection = 0;
              this.frameStart = 0;
            } else {
              if (this.selection.index < this.items.length) {
                this.selection = this.selection.index + 1;
                if (this.selection.index > this.frameStart + visibleListItems - 1) {
                  if (this.frameStart < this.items.length - visibleListItems) {
                    this.frameStart++;
                  } else {
                    this.frameStart = this.frameStart;
                  }
                }
              }
            }
          }
          /*
        If a selection is made inside of the actual listbox frame by the user,
        the API doesn't offer any way to know which part of the list is currently
        visible in the listbox "frame". If the user was to re-enter the `q` edittext
        and then hit an arrow key the above event listener will not work correctly so
        I just move the next selection (be it up or down) to the middle of the "frame".
        */
          if (this.selection) {
            if (
              this.selection.index < this.frameStart ||
              this.selection.index > this.frameStart + visibleListItems - 1
            )
              this.frameStart = this.selection.index - Math.floor(visibleListItems / 2);
            // don't move the frame if list items don't fill the available rows
            if (this.items.length <= visibleListItems) return;
            // move the frame by revealing the calculated `this.frameStart`
            this.revealItem(this.frameStart);
          }
        }
      }
      fromQuery = false;
      fromQueryShiftKey = false;
    } else {
      if (e.keyName == "Up" && this.selection.index == 0) {
        this.selection = this.items.length - 1;
        e.preventDefault();
      }
      if (e.keyName == "Down" && this.selection.index == this.items.length - 1) {
        this.selection = 0;
        e.preventDefault();
      }
    }
  });
}

// USER DIALOGS

function commandPalette(commands, title, columns, multiselect, showOnly, saveHistory) {
  var qCache = {};

  // create the dialog
  var win = new Window("dialog");
  win.text = title;
  win.alignChildren = "fill";

  // setup the query input
  var q = win.add("edittext");
  q.helpTip = localize(strings.cd_q_helptip);
  q.active = true;

  // setup the commands listbox
  var matches = showOnly ? showOnly : commands;
  var list = new ListBoxWrapper(
    matches,
    win,
    "commands",
    paletteSettings.bounds,
    columns,
    multiselect,
    null,
    [selectOnDoubleClick, scrollListBoxWithArrows]
  );

  // window buttons
  var winButtons = win.add("group");
  winButtons.orientation = "row";
  winButtons.alignChildren = ["center", "center"];
  var ok = winButtons.add("button", undefined, "OK");
  ok.preferredSize.width = 100;
  var cancel = winButtons.add("button", undefined, localize(strings.cancel), {
    name: "cancel",
  });
  cancel.preferredSize.width = 100;

  // work-around to stop windows from flickering/flashing explorer
  if (windowsFlickerFix) {
    simulateKeypress("TAB", 1);
  }

  // as a query is typed update the listbox
  q.onChanging = function () {
    if (this.text === "") {
      matches = showOnly ? showOnly : commands;
    } else if (qCache.hasOwnProperty(this.text)) {
      matches = qCache[this.text];
    } else {
      matches = matcher(this.text, commands);
      qCache[this.text] = matches;
    }
    list.update(matches);
  };

  // save query and command history
  function updateHistory() {
    // don't add to history if no query was typed
    if (q.text === "") return;

    // don't add `Recent Commands` command
    if (list.listbox.selection.id == "builtin_recentCommands") return;

    history.push({
      query: q.text,
      command: list.listbox.selection.id,
      timestamp: Date.now(),
    });
    userHistory.save();
  }

  // allow using arrow key from query input by sending a custom keyboard event to the list box
  if (!multiselect) {
    var kbEvent = ScriptUI.events.createEvent("KeyboardEvent");
    q.addEventListener("keydown", function (e) {
      // hack to keep original commands from reloading before closing command palette when hitting the escape key while within the query box
      if (e.keyName == "Escape") {
        e.preventDefault();
        win.close();
      }
      if (e.keyName == "Up" || e.keyName == "Down") {
        kbEvent.initKeyboardEvent(
          "keydown",
          true,
          true,
          list.listbox,
          e.keyName,
          0,
          ""
        );
        fromQuery = true;
        fromQueryShiftKey = e.getModifierState("shift");
        list.listbox.dispatchEvent(kbEvent);
        e.preventDefault();
      }
    });
  }

  if (win.show() == 1) {
    if (!list.listbox.selection) return;
    if (multiselect) {
      var items = [];
      for (var i = 0; i < list.listbox.selection.length; i++) {
        items.push(list.listbox.selection[i].id);
      }
      return items;
    } else {
      if (saveHistory) {
        updateHistory();
      }
      if (list.listbox.selection.hasOwnProperty("id")) {
        return list.listbox.selection.id;
      } else {
        return list.listbox.selection.name;
      }
    }
  }
  return false;
}
