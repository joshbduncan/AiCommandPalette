//@include "fuzzy.jsxinc"
//@include "nofuzz.jsxinc"
//@include "commandPalette.jsxinc"
//@include "customCommands.jsxinc"
//@include "pickerBuilder.jsxinc"
//@include "workflowBuilder.jsxinc"
//@include "startupBuilder.jsxinc"

/**
 * Filter the supplied commands by multiple factors.
 * @param   {Array}   commands             Command `id`s to filter through.
 * @param   {Array}   types                Types of commands to include in the results (e.g. builtin, tool, config, etc.).
 * @param   {Boolean} showHidden           Should user-hidden commands be included?
 * @param   {Boolean} showNonRelevant      Should non-relevant commands be included?
 * @param   {Array}   hideSpecificCommands Future me including a hack to hide specific commands.
 * @returns {Array}                        Filtered command ids.
 */
function filterCommands(
  commands,
  types,
  showHidden,
  showNonRelevant,
  hideSpecificCommands
) {
  var filteredCommands = [];
  var id, command;
  commands = commands ? commands : Object.keys(commandsData);
  for (var i = 0; i < commands.length; i++) {
    id = commands[i];
    if (!commandsData.hasOwnProperty(id)) continue;
    command = commandsData[id];

    // make sure Ai version meets command requirements
    if (!commandVersionCheck(command)) continue;

    // skip any hidden commands
    if (!showHidden && prefs.hiddenCommands.includes(id)) continue;

    // skip any non relevant commands
    if (!showNonRelevant && !relevantCommand(command)) continue;

    // skip any specific commands name in hideSpecificCommands
    if (hideSpecificCommands && hideSpecificCommands.includes(id)) continue;

    // then check to see if the command should be included
    if (!types || types.includes(command.type)) filteredCommands.push(id);
  }
  return filteredCommands;
}

/**
 * Determine is a command is relevant at the current moment.
 * @param   {Object}  command Command object to check.
 * @returns {Boolean}         If command is relevant.
 */
function relevantCommand(command) {
  // hide commands requiring an active documents if requested
  if (command.docRequired && app.documents.length < 1) return false;
  // hide commands requiring an active selection if requested
  if (command.selRequired && app.activeDocument.selection.length < 1) return false;

  // hide `Edit Workflow...` command if no workflows
  if (command.id == "builtin_editWorkflow" && prefs.workflows.length < 1) return false;
  // hide `All Workflows...` command if no workflows
  if (command.id == "builtin_allWorkflows" && prefs.workflows.length < 1) return false;
  // hide `All Scripts...` command if no scripts
  if (command.id == "builtin_allScripts" && prefs.scripts.length < 1) return false;
  // hide `All Bookmarks...` command if no bookmarks
  if (command.id == "builtin_allBookmarks" && prefs.bookmarks.length < 1) return false;
  // hide `All Actions...` command if no actions
  if (command.id == "builtin_allActions" && !userActions.loadedActions) return false;
  // hide `Edit Picker...` command if no pickers
  if (command.id == "builtin_editPicker" && prefs.pickers.length < 1) return false;
  // hide `All Pickers...` command if no pickers
  if (command.id == "builtin_allPickers" && prefs.pickers.length < 1) return false;

  // hide `Enable Fuzzy Matching` command if already enabled
  if (command.id == "config_enableFuzzyMatching" && prefs.fuzzy) return false;
  // hide `Disable Fuzzy Matching` command if already disabled
  if (command.id == "config_disableFuzzyMatching" && !prefs.fuzzy) return false;

  // hide `Unhide Commands...` command if no hidden commands
  if (command.id == "config_unhideCommand" && prefs.hiddenCommands.length < 1)
    return false;
  // hide `Recent Commands...` and `Clear History` if no recent commands
  if (
    command.id == "builtin_recentCommands" &&
    Object.keys(recentCommands).length === 0
  ) {
    return false;
  }

  return true;
}
